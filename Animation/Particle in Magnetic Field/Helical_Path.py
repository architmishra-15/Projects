# -*- coding: utf-8 -*-
"""Helical Path.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17DByA6CcW0G1o_b021zjGKxFRbDpymer
"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.animation as animation
import numpy as np

m = 1.67262192 * 10**-27                              # Mass of proton
b = 10                                                # Magnetic field vector
q = 1.602176634 * 10**-19                             # Charge
v = 10**7                                             # Velocity vector
theta = np.pi/3                                       # Angle between velocity vector and Magnetic field


r = m * v * np.sin(theta) / (q * b)
omega = q * b/m
T = 2 * np.pi / omega                                 # Time period
P = v * np.cos(theta) * T                             # Pitch

# Time parameters
t_max = 3 * T                                        # Total simulation time
dt = T / 100
t = np.arange(0, t_max, dt)

x = -v * np.cos(theta) * t
y = r * np.cos(omega * t)
z = r * np.sin(omega * t)


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
plt.gca().invert_yaxis()
plt.gca().invert_xaxis()
line, = ax.plot([], [], [], 'r-', markersize=4)

# ax.view_init(elev=90 - np.degrees(np.pi + np.pi/1.5894), azim=np.degrees(np.pi/2.56))

ax.set_xlim(x.min(), x.max())
ax.set_ylim(y.min(), y.max())
ax.set_zlim(z.min(), z.max())

ax.set_title('Helical Path of Charged Particle in Magnetic Field')


def animate(i):
    line.set_data(x[:i+1], y[:i+1])
    line.set_3d_properties(z[:i+1])

    ax.set_xlim(x[0], x[min(i + 1, len(x) - 1)])
    ax.set_ylim(y.min(), y.max())
    ax.set_zlim(z.min(), z.max())

    current_time = i * dt
    if current_time >= 5.5:
        ax.view_init(elev=90 - np.degrees(np.pi + np.pi/1.5894), azim=np.degrees(np.pi/2.56))


    return line,

ani = animation.FuncAnimation(fig, animate, frames=len(x), interval=50, blit=True)

writer = animation.FFMpegWriter(fps=120, metadata=dict(artist='Archit Mishra', subject='Helical path'), bitrate=60000000)
ani.save('particle_helix_4k120fps.mp4', writer=writer, dpi=320)

plt.show()

m = 1.67262192 * 10**-27                              # Mass of proton
b = 10                                                # Magnetic field vector
q = 1.602176634 * 10**-19                             # Charge
v = 10**7                                             # Velocity vector
theta = np.pi/3                                       # Angle between velocity vector and Magnetic field


r = m * v * np.sin(theta) / (q * b)
omega = q * b/m
T = 2 * np.pi / omega                                 # Time period
P = v * np.cos(theta) * T                             # Pitch

# Time parameters
t_max = 5 * T                                         # Total simulation time
dt = T / 100
t = np.arange(0, t_max, dt)

x = -v * np.cos(theta) * t
y = r * np.cos(omega * t)
z = r * np.sin(omega * t)


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
plt.gca().invert_yaxis()
plt.gca().invert_xaxis()
line, = ax.plot([], [], [], 'r-', markersize=4)

ax.view_init(np.pi + np.pi/1.5894, np.pi/2.56)

ax.set_xlim(x.min(), x.max())
ax.set_ylim(y.min(), y.max())
ax.set_zlim(z.min(), z.max())
ax.set_xticklabels([])
ax.set_yticklabels([])
ax.set_zticklabels([])
ax.set_title('Helical Path of Charged Particle in Magnetic Field')


def animate(i):
    line.set_data(x[:i+1], y[:i+1])
    line.set_3d_properties(z[:i+1])

    ax.set_xlim(x[0], x[min(i + 1, len(x) - 1)])
    ax.set_ylim(y.min(), y.max())
    ax.set_zlim(z.min(), z.max())

    current_time = i * dt
    if current_time >= 5.5:
        ax.view_init(elev=90 - np.degrees(np.pi + np.pi/1.5894), azim=np.degrees(np.pi/2.56))


    return line,

ani = animation.FuncAnimation(fig, animate, frames=len(x), interval=50, blit=True)

writer = animation.FFMpegWriter(fps=120, metadata=dict(artist='Archit Mishra', subject='Helical path'), bitrate=60000000)
ani.save('particle_helix-front_4k120fps.mp4', writer=writer, dpi=320)

plt.show()

from IPython.display import Video, display, Image
# display(Image('projectile.gif', embed=True))
display(Video('particle_helix-front_4k120fps.mp4', embed=True, width=500))

m = 1.67262192 * 10**-27 # Mass of proton
b = 10 # Magnetic field vector
q = 1.602176634 * 10**-19 # Charge
v = 10**7 # Velocity vector
theta = np.pi/3 # Angle between velocity vector and Magnetic field


r = m * v * np.sin(theta) / (q * b)
omega = q * b/m
T = 2 * np.pi / omega  # Time period
P = v * np.cos(theta) * T # Pitch

# Time parameters
t_max = 6 * T  # Total simulation time (2 periods)
dt = T / 100    # Time step (100 steps per period)
t = np.arange(0, t_max, dt)

x = -v * np.cos(theta) * t
y = r * np.cos(omega * t)
z = r * np.sin(omega * t)

# Plot the trajectory
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
plt.gca().invert_yaxis()
plt.gca().invert_xaxis()
line, = ax.plot([], [], [], 'r-', markersize=4)  # Line for the particle

ax.set_xlim(x.min(), x.max())
ax.set_ylim(y.min(), y.max())
ax.set_zlim(z.min(), z.max())

ax.set_xticklabels([])
ax.set_yticklabels([])
ax.set_zticklabels([])
ax.set_title('Helical Path of Charged Particle in Magnetic Field')

# Animation function
def animate(i):
    line.set_data(x[:i+1], y[:i+1])  # Update x and y data
    line.set_3d_properties(z[:i+1])  # Update z data
    return line,

# Create animation
ani = animation.FuncAnimation(fig, animate, frames=len(x), interval=50, blit=True)

ani.save('particle_helix.mp4', writer='ffmpeg', fps=30)

plt.show()

